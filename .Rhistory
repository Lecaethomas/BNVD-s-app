# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observeEvent(input$map_shape_click, {
print(input$map_shape_click)
req(input$col)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
## Spatial Polygon ##########
Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
SpP = SpatialPolygons(list(Srs1,Srs2,Srs3), 1:3)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
print(input$map_shape_click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
print(input$map_shape_click$id)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
library(shiny)
library(leaflet)
library(sp)
# library(raster)
## Spatial Polygon ##########
Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
SpP = SpatialPolygons(list(Srs1,Srs2,Srs3), 1:3)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
print(input$map_shape_click$id)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
print(map_click)
print(input$map_shape_click$id)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map01_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map01_geojson_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map01_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addPolygons(data = SpPDF, group = "polygons", color = "white", weight = 1, fillOpacity = 0.7)
})
observeEvent(input$map01_shape_click, {
click <- input$map01_shape_click
if (!is.null(click)) {
layerId <- click$id
print(layerId)
}
})
observe({
req(input$col)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
clearGroup("polygons") %>%
addPolygons(data = SpPDF, group = "polygons", color = ~pal(factor(SpPDF$POPULATION)), weight = 1, fillOpacity = 0.7)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addPolygons(data = SpPDF, group = "polygons", color = "white", weight = 1, fillOpacity = 0.7)
})
observeEvent(input$map01_shape_click, {
click <- input$map01_shape_click
if (!is.null(click)) {
layerId <- click$id
print(layerId)
}
})
observe({
req(input$col)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
observeEvent(input$map01_shape_click, {
leafletProxy("map01") %>%
clearGroup("polygons") %>%
addPolygons(data = SpPDF, group = "polygons", color = ~pal(factor(SpPDF$POPULATION)), weight = 1, fillOpacity = 0.7)
})
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("map01")
)
## SERVER ##########
server <- function(input, output) {
output$map01 <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$map01_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("map01") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
ibrary(shiny)
library(shiny)
library(leaflet)
library(sp)
# library(raster)
SpPDF <- st_read("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app/data/ign_admin_com_202002_4326_simplified_limited.shp")
## UI ##########
ui <- fluidPage(
selectInput("col", label = "Select a color", choices = c("Blues", "viridis", "magma")),
leafletOutput("mymap")
)
## SERVER ##########
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet()  %>%
addTiles() #%>%
# fitBounds(lng1 = Extent[1],lat1 = Extent[3], lng2 = Extent[2], lat2 = Extent[4])
})
observe({
req(input$col)
click <- input$mymap_shape_click
print(click)
pal = colorFactor(input$col, domain = factor(SpPDF$POPULATION))
leafletProxy("mymap") %>%
addPolygons(data = SpPDF, color = ~pal(factor(SpPDF$POPULATION)))
})
}
shinyApp(ui, server)
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
shiny::runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
library(DBI)
library(RPostgreSQL)
library(DBI)
library(RPostgres)
# assuming you have created a connection object 'con' to your PostgreSQL database
# define your textarea input
textarea_input <- "element1;element2;element3"
# split the textarea input into a vector of elements
elements <- unlist(strsplit(textarea_input, split=";"))
# create the query string
query <- paste("SELECT * FROM mytable WHERE mycolumn IN (", paste("'", elements, "'", collapse=","), ")", sep="")
# # execute the query using DBI and RPostgreSQL
# result <- dbGetQuery(con, query)
library(DBI)
library(RPostgres)
# assuming you have created a connection object 'con' to your PostgreSQL database
# define your textarea input
textarea_input <- "element1;element2;element3"
# split the textarea input into a vector of elements
elements <- unlist(strsplit(textarea_input, split=";"))
# create the query string
query <- paste("SELECT * FROM mytable WHERE mycolumn IN (", paste("'", elements, "'", collapse=","), ")", sep="")
print(query)
# # execute the query using DBI and RPostgreSQL
# result <- dbGetQuery(con, query)
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
library(DBI)
library(RPostgres)
# Suppose this is your list
my_list <- c("element1", "element2 with 'single quote'", "element3")
# Escape single quotes in list elements
my_list_escaped <- gsub("'", "''", my_list)
# Create SQL query string
query <- paste0("SELECT * FROM my_table WHERE my_column IN ('",
paste(my_list_escaped, collapse = "', '"), "')")
print(query)
# # execute the query using DBI and RPostgreSQL
# result <- dbGetQuery(con, query)
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
shiny::runApp('C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app')
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
cd C:\_FORMATIONS\R\shiny\formation_2023\bnvds_app
setwd(C:\_FORMATIONS\R\shiny\formation_2023\bnvds_app)
setwd("C:\_FORMATIONS\R\shiny\formation_2023\bnvds_app")
setwd("C:/_FORMATIONS/R/shiny/formation_2023/bnvds_app")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
warnings()
roxygen2::roxygenise()
roxygen2::roxygenise()
